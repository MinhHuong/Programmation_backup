import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/*
 * Created on 6 sept. 2005
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */

/**
 * Cette classe modélise une application graphique de visualisation
 * de formes. Elle dérive de JFrame, qui est une fenêtre SWING "light".
 * 
 * @author lachaud
 *
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class VisualiseurDeFormes extends JFrame 
{
	/**
	 * Référence l'objet servant à générer des nombres aléatoires.
	 */
	private Random m_random;
	
	/**
	 * Référence la liste des formes à dessiner.
	 */
	private Vector<FormeColoree> m_formes;
	
	/**
	 * Référence l'objet où les formes se dessinent.
	 */
	private ZoneDeDessin m_panneau_dessin;
	
	/**
	 * Référence l'objet où sont placés les boutons.
	 */
	private JPanel m_panneau_boutons;
	
	private RectangleParDragSouris rect_drag;
	
	/**
	 * Cette classe modélise la réaction de création d'un cercle suite
	 * à un clic sur un bouton. C'est une classe interne à 
	 * VisualiseurDeFormes.
	 * 
	 * @author lachaud
	 *
	 * To change the template for this generated type comment go to
	 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
	 */
	class BoutonCercleAction implements ActionListener	
	{
		/**
		 * Référence l'application qui a créé ce bouton.
		 */
		
		/**
		 * Constructeur.
		 * @param visu est l'application relié à ce bouton.
		 */
		BoutonCercleAction()
		{}
		 
		/**
		 * Crée un nouveau cercle de coordonnées et rayon aléatoire.
		 * suite à l'action [e].
		 * 
		 * @param e l'action qui a déclenchée l'appel à cette méthode.
		 */
		public void actionPerformed( ActionEvent e)
		{
			Random r = getRandom();
			Cercle c = new Cercle(
				r.nextInt( 200 ),
				r.nextInt( 200 ),
			    r.nextInt( 40 )+ 20,
			    Color.red );
			getFormes().add( c );
			repaint();
		}
	}
	
	class BoutonRectangleAction implements ActionListener
	{
		BoutonRectangleAction()
		{}
		
		public void actionPerformed( ActionEvent e )
		{
			Random r =getRandom();
			
			Rectangle rect = new Rectangle (
					r.nextInt( 300 ) + 1, // de 1 à 300
					r.nextInt( 300 ) + 1, // si r.nextInt( 300 ) --> 0 à 299
					r.nextInt( 100 ) + 1,
					r.nextInt( 100 ) + 1,
					Color.blue
					);
			getFormes().add( rect );
			repaint();
		}
	}
	
	class BoutonReset implements ActionListener
	{		
		BoutonReset()
		{}
		
		/* (non-Javadoc)
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		public void actionPerformed( ActionEvent e )
		{
			getFormes().clear();
			repaint();
		}
	}
	
	class BoutonAleatoire implements ActionListener
	{
		private BoutonCercleAction b_cercle;
		private BoutonRectangleAction b_rect;
		
		BoutonAleatoire()
		{}
		
		public void actionPerformed( ActionEvent e )
		{
			Random r = getRandom();
			int number = r.nextInt(2); // 0 -> 1
			
			if( number == 0 ) // Cercle
			{
				b_cercle = new BoutonCercleAction();
				b_cercle.actionPerformed(e);
			}
			else // Rectangle
			{
				b_rect = new BoutonRectangleAction();
				b_rect.actionPerformed(e);
			}
		}
	}
	
	class BoutonChangeCouleur implements ActionListener
	{	
		BoutonChangeCouleur()
		{}
		
		public void actionPerformed( ActionEvent e )
		{
			Vector<Color> m_couleur = new Vector<Color>();
			m_couleur.add(Color.black);
			m_couleur.add(Color.magenta);
			m_couleur.add(Color.green);
			m_couleur.add(Color.cyan);
			m_couleur.add(Color.yellow);
			m_couleur.add(Color.gray);
			m_couleur.add(Color.pink);
			m_couleur.add(Color.orange);
			
			Random r = getRandom();
			int _index = r.nextInt( m_couleur.size() );
			
			if( !m_formes.isEmpty() )	
				getLastForme().setColour( m_couleur.elementAt(_index) );
			
			repaint();
		}
	}
	
	/**
	 * Constructeur par défaut. 
	 * Crée une fenêtre avec un nom, une zone de dessin 
	 * et une zone pour placer des boutons.
	 */
	/**
	 * @param title
	 */
	public VisualiseurDeFormes(String title)
	{
		super( title );
		m_formes = new Vector<FormeColoree>();
		m_random = new Random();
		
		setPreferredSize( new Dimension( 700, 400 ) ); 
		setLayout( new BorderLayout() );
		
		m_panneau_dessin = new ZoneDeDessin();
		m_panneau_dessin.setFormes( m_formes );
		m_panneau_boutons = new JPanel();
		JLabel label = new JLabel("Visualiseur de Formes");
		getContentPane().add( label, BorderLayout.NORTH );
		getContentPane().add( m_panneau_boutons, BorderLayout.SOUTH );
		getContentPane().add( m_panneau_dessin, BorderLayout.CENTER );
		
		BoutonCercleAction action_cercle = new BoutonCercleAction();
		JButton b1 = new JButton( "Cercle" );
		b1.addActionListener( action_cercle );
		m_panneau_boutons.add( b1 );
		
		BoutonRectangleAction action_rect = new BoutonRectangleAction();
		JButton b2 = new JButton( "Rectangle" );
		b2.addActionListener( action_rect );
		m_panneau_boutons.add( b2 );
		
		BoutonReset action_reset = new BoutonReset();
		JButton b3 = new JButton( "Reset" );
		b3.addActionListener( action_reset );
		m_panneau_boutons.add( b3 );
		
		BoutonAleatoire action_aleatoire = new BoutonAleatoire();
		JButton b4 = new JButton( "Aléatoire" );
		b4.addActionListener( action_aleatoire );
		m_panneau_boutons.add( b4 );
		
		BoutonChangeCouleur action_changeCouleur = new BoutonChangeCouleur();
		JButton b5 = new JButton( "Couleur" );
		b5.addActionListener( action_changeCouleur );
		m_panneau_boutons.add( b5 );
		
		rect_drag = new RectangleParDragSouris( m_panneau_dessin );
		
				
		// Indique ce qu'il faut faire si on clic sur "fermer la fenetre".
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	/**
	 * Crée une application "Visualiseur de Formes".
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		VisualiseurDeFormes visu = new VisualiseurDeFormes("prems");
		//VisualiseurDeFormes visu_sec = new VisualiseurDeFormes("deuze");
		//Display the window.
		visu.pack();
		visu.setVisible(true);	
		//visu_sec.pack();
		//visu_sec.setVisible(true);
	}
	
	/**
	 * @return le vecteur des formes
	 */
	public Vector<FormeColoree> getFormes() {
		return m_formes;
	}

	/**
	 * @return la dernière forme ajoutée
	 */
	public FormeColoree getLastForme()
	{
		if ( !m_formes.isEmpty() )
			return (FormeColoree) m_formes.lastElement();
		else 
			return null;
	}
	
	/**
	 * @return l'objet permettant de générer des nombres aléartoires.
	 */
	public Random getRandom() {
		return m_random;
	}

}
