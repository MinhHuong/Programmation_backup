package gui;

import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;

import utils.DatabaseSim;
import dataInVector.DataDepQuoti;
import dataInVector.DataFlux;

/**
 * Le modèle de la table dans chaque onglet
 * 
 * @author MiHu
 *
 * @param <T> Le type de données convenable (DataDepQuoti, DataFlux, DataEco...)
 */
@SuppressWarnings("serial")
public class MyTableModel<T> extends AbstractTableModel
{
	private Vector<String> m_columns;

	private Vector<T> m_data;

	private Vector<T> m_data_store;

	public MyTableModel()
	{
		super();

		m_columns = new Vector<String>();
		m_data = new Vector<T>();
		m_data_store = new Vector<T>();
		addTableModelListener(new MyTableListener<T>(this));
	}

	public Vector<T> getData()
	{
		return m_data;
	}

	public Vector<T> getDataStored()
	{
		return m_data_store;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Class getColumnClass(int c) {
		return getValueAt(0, c).getClass();
	}

	public void setColumns(Vector<String> col)
	{
		m_columns = col;
	}

	public void setData(Vector<T> data)
	{
		m_data = data;
	}

	@Override
	public int getRowCount() 
	{
		return m_data.size();
	}

	@Override
	public int getColumnCount() 
	{
		return m_columns.size();
	}

	public String getColumnName(int columnIndex)
	{
		return m_columns.elementAt(columnIndex);
	}

	public boolean isCellEditable(int row, int col)
	{
		return true;
	}

	@Override
	public Object getValueAt(int rowIndex, int columnIndex) 
	{
		T temp_data = m_data.get(rowIndex);

		if(temp_data instanceof DataDepQuoti)
		{
			DataDepQuoti my_data = (DataDepQuoti) temp_data;
			return my_data.getElementAt(columnIndex);
		}
		else if(temp_data instanceof DataFlux)
		{
			DataFlux my_data = (DataFlux) temp_data;
			return my_data.getElementAt(columnIndex);
		}

		return null;
	}

	@Override
	public void setValueAt(Object obj, int rowIndex, int columnIndex)
	{
		T temp_data = m_data.get(rowIndex);

		try
		{
			if(temp_data instanceof DataDepQuoti)
			{
				((DataDepQuoti)temp_data).setElementAt(columnIndex, obj);
			}
			else if(temp_data instanceof DataFlux)
			{
				((DataFlux)temp_data).setElementAt(columnIndex, obj);
			}

			fireTableCellUpdated(rowIndex, columnIndex);
		}
		catch(Exception ex)
		{
			System.out.println("Unexpected exception");
		}
	}

	public void setDateToAll(String date)
	{
		if(m_data.get(0) instanceof DataDepQuoti)
		{
			for(int i = 0 ; i < m_data.size() ; i++)
			{
				((DataDepQuoti)m_data.get(i)).setDate(date);
			}
		}
	}

	@SuppressWarnings("unchecked")
	public void copyAllData(Vector<T> src, Vector<T> dest)
	{
		for(int i = 0 ; i < src.size() ; i++)
		{
			T temp_data = src.get(i);

			if(temp_data instanceof DataDepQuoti)
			{
				DataDepQuoti depQuoti = new DataDepQuoti
						(
								((DataDepQuoti)temp_data).getIntitule(),
								((DataDepQuoti)temp_data).getMontant(),
								((DataDepQuoti)temp_data).isEmprunt(),
								((DataDepQuoti)temp_data).isPret(),
								((DataDepQuoti)temp_data).getDate()
						);
				dest.addElement((T)depQuoti);
			}
			
			if(temp_data instanceof DataFlux)
			{
				DataFlux flux = new DataFlux
						(
								((DataFlux)temp_data).getTitle(),
								((DataFlux)temp_data).getAmount(),
								((DataFlux)temp_data).getType(),
								((DataFlux)temp_data).getPerson(),
								((DataFlux)temp_data).getDate(),
								((DataFlux)temp_data).isPaid()
						);
				dest.addElement((T)flux);
			}

			//dest.addElement(src.get(i));
			// Ce code ne marche pas quand on modifie des données, 
			// même s'il va bien si l'on ne fait que la suppression
		}
	}

	public void copyToDB()
	{
		if(m_data.size() != 0)
		{
			if(m_data.get(0) instanceof DataDepQuoti)
			{
				// first, erase all datas of that chosen date only (already precised in the vector m_data)
				DataDepQuoti example = (DataDepQuoti)m_data.get(0);
				DatabaseSim.eraseAllOnDate(example.getDate());

				for(int i = 0 ; i < m_data.size() ; i++)
				{
					T temp_data = m_data.get(i);

					DataDepQuoti depQuoti = new DataDepQuoti
							(
									((DataDepQuoti)temp_data).getIntitule(),
									((DataDepQuoti)temp_data).getMontant(),
									((DataDepQuoti)temp_data).isEmprunt(),
									((DataDepQuoti)temp_data).isPret(),
									((DataDepQuoti)temp_data).getDate()
							);

					if(!DatabaseSim.checkOccurenceDepQuoti(depQuoti))
					{
						DatabaseSim.addDepQuotiToDB(depQuoti);
					}
				}
			}
			
			if(m_data.get(0) instanceof DataFlux)
			{
				for(int i = 0 ; i < m_data.size() ; i++)
				{
					T temp_data = m_data.get(i);
					
					DataFlux flux = new DataFlux
							(
									((DataFlux)temp_data).getTitle(),
									((DataFlux)temp_data).getAmount(),
									((DataFlux)temp_data).getType(),
									((DataFlux)temp_data).getPerson(),
									((DataFlux)temp_data).getDate(),
									((DataFlux)temp_data).isPaid()
							);
				}
			}
		}
	}

	public void restoreData()
	{
		m_data.clear();
		copyAllData(m_data_store, m_data);
		m_data_store.clear();
		fireTableDataChanged();
	}

	public void clearDataStored()
	{
		m_data_store.clear();
	}

	public void delLines(int[] line)
	{
		Vector<T> rem = new Vector<T>();

		for(int i = 0 ; i < line.length ; i++)
		{
			rem.add(m_data.get(line[i]));
		}

		for(int i = 0 ; i < rem.size() ; i++)
		{
			m_data.remove(rem.get(i));
		}

		int firstR = 0, lastR = 0;
		for(int i = 0 ; i < line.length ; i++)
		{
			if(firstR > line[i]) firstR = line[i];
			if(lastR  < line[i]) lastR = line[i];
		}

		fireTableRowsDeleted(firstR, lastR);
	}

	public void delAll()
	{
		m_data.removeAllElements();
		fireTableDataChanged();
	}

	public void addLine(T myObj) 
	{
		m_data.addElement(myObj);
		fireTableRowsInserted(m_data.size()-1, m_data.size());
	}

	public void showAllData()
	{
		for(int i = 0 ; i < m_data.size() ; i++)
		{
			System.out.println(m_data.get(i).toString());
		}
	}

	class MyTableListener<S> implements TableModelListener
	{
		private MyTableModel<S> m_tab_model;

		public MyTableListener(MyTableModel<S> tabModel)
		{
			m_tab_model = tabModel;
		}

		@Override
		public void tableChanged(TableModelEvent e) 
		{
			if(e.getType() == TableModelEvent.UPDATE)
			{
				if(m_tab_model.getData().size() != 0)
				{
					S temp_data = m_tab_model.getData().get(e.getFirstRow());

					if(temp_data instanceof DataDepQuoti)
					{
						DataDepQuoti depQuoti = (DataDepQuoti) temp_data;
						boolean old_emprunt = depQuoti.isEmprunt();
						boolean old_pret = depQuoti.isPret();
						
						if( (depQuoti.isEmprunt() == true) && (depQuoti.isPret() == true) )
						{
							JOptionPane.showMessageDialog(null, 
									"An amount can't be considered lent and borrowed at the same time !", 
									"Invalid data",
									JOptionPane.ERROR_MESSAGE);
							depQuoti.setEmprunt(old_emprunt);
							depQuoti.setPret(old_pret);
							fireTableRowsUpdated(e.getFirstRow(), e.getLastRow());
						}
					}
				}
			}

		}

	}
}